{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAround","coord","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","makeTable","_this$props","ncols","nrows","y","row","x","push","Math","random","chanceLightStartsOn","_this$props2","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flipCell","every","cell","setState","_this2","xCord","key","yCord","src_Cell_0","concat","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.834ceec3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Cell.css';\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAround(this.props.coord);\n  }\n\n  render() {\n    let classes = 'Cell' + (this.props.isLit ? ' Cell-lit' : '');\n\n    return <td className={classes} onClick={this.handleClick} />;\n  }\n}\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n    this.createBoard = this.createBoard.bind(this);\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n    this.makeTable = this.makeTable.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board = [];\n    let { ncols, nrows } = this.props;\n\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split('-').map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // Flip this cell and the cells around it\n    flipCell(y, x);\n    flipCell(y + 1, x);\n    flipCell(y - 1, x);\n    flipCell(y, x + 1);\n    flipCell(y, x - 1);\n\n    // win when every cell is false\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({ board, hasWon });\n  }\n\n  /** Returns HTML table to render */\n  makeTable() {\n    return (\n      <table className='Board'>\n        <tbody>\n          {this.state.board.map((row, xCord) => (\n            <tr key={xCord}>\n              {row.map((cell, yCord) => (\n                <Cell\n                  key={`${xCord}-${yCord}`}\n                  coord={`${xCord}-${yCord}`}\n                  isLit={cell}\n                  flipCellsAround={this.flipCellsAround}\n                />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n\n  /** Render game board or winning message. */\n  render() {\n    return (\n      <div>\n        {this.state.hasWon ? (\n          <div className='Board-title'>\n            <div className='winner'>\n              <span className='neon-orange'>YOU</span>\n              <span className='neon-blue'>WIN!</span>\n            </div>\n          </div>\n        ) : (\n          <div>\n            <div className='Board-title'>\n              <div className='neon-orange'>Lights</div>\n              <div className='neon-blue'>Out</div>\n            </div>\n            {this.makeTable()}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from 'react';\nimport Board from './Board';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}